import cv2
import numpy as np
import imageio
import time
import mediapipe as mp
import subprocess
import random
import sys


# 设置颜色范围
lower = np.array([25, 30, 110])
upper = np.array([80, 70, 180])


# 三种影片的路径
videos = [
    r'C:\Users\User\Downloads\1.mp4',
    r'C:\Users\User\Downloads\2.mp4',
    r'C:\Users\User\Downloads\3.mp4'
]

def generateSeedModel(img, contours, png_img_resized):
    seed_model_shown = False
    for contour in contours:
        area = cv2.contourArea(contour)
        if area > 700:
            M = cv2.moments(contour)
            if M["m00"] != 0:
                cx = int(M["m10"] / M["m00"])
                cy = int(M["m01"] / M["m00"])
                png_x = cx - (png_img_resized.shape[1] // 2)
                png_y = cy - (png_img_resized.shape[0] // 2)
                if png_x >= 0 and png_y >= 0 and png_x + png_img_resized.shape[1] <= img.shape[1] and png_y + png_img_resized.shape[0] <= img.shape[0]:
                    for c in range(0, 3):
                        img[png_y:png_y + png_img_resized.shape[0], png_x:png_x + png_img_resized.shape[1], c] = \
                            img[png_y:png_y + png_img_resized.shape[0], png_x:png_x + png_img_resized.shape[1], c] * (1 - png_img_resized[:, :, 3] / 255.0) + png_img_resized[:, :, c] * (png_img_resized[:, :, 3] / 255.0)
                    seed_model_shown = True
    return seed_model_shown

# 加载带有透明度的PNG图像（RGBA）并调整大小
png_img_path = r'C:\Users\User\Downloads\seed.png'
png_img = cv2.imread(png_img_path, cv2.IMREAD_UNCHANGED)
desired_width = 30
desired_height = 30
png_img_resized = cv2.resize(png_img, (desired_width, desired_height))

# 加载GIF图像
gif_path = r'C:\Users\User\Downloads\下雨.gif'
gif = imageio.mimread(gif_path)
gif = [cv2.cvtColor(img, cv2.COLOR_RGBA2BGRA) for img in gif]
gif_resized = [cv2.resize(img, (100, 100)) for img in gif]

# 加载新的GIF图像
new_gif_path = r'C:\Users\User\Downloads\goku.gif'
new_gif = imageio.mimread(new_gif_path)
new_gif = [cv2.cvtColor(img, cv2.COLOR_RGBA2BGRA) for img in new_gif]
new_gif_resized = [cv2.resize(img, (100, 100)) for img in new_gif]

# 控制GIF的播放状态
gif_index = 0
new_gif_index = 0
gif_play_count = 0
new_gif_play_count = 0  # 新增计数器
new_gif_play_durations = []  # 用于存储播放时长
new_gif_start_time = None  # 用于跟踪播放开始时间

# 初始化新的GIF显示状态
new_image2_shown = False

# 加载中心图像
center_image_path = r'C:\Users\User\Downloads\oho2.png'
center_image = cv2.imread(center_image_path, cv2.IMREAD_UNCHANGED)
center_image_resized = cv2.resize(center_image, (100, 100))

# 加载新的图像
new_image1_path = r'C:\Users\User\Downloads\f22.png'
new_image1 = cv2.imread(new_image1_path, cv2.IMREAD_UNCHANGED)
new_image1_resized = cv2.resize(new_image1, (100, 100))

new_image2_path = r'C:\Users\User\Downloads\f33.png'
new_image2 = cv2.imread(new_image2_path, cv2.IMREAD_UNCHANGED)
new_image2_resized = cv2.resize(new_image2, (100, 100))

new_image3_path = r'C:\Users\User\Downloads\oho2.png'  # 这里替换成你的 new_image3 的路径
new_image3 = cv2.imread(new_image3_path, cv2.IMREAD_UNCHANGED)
new_image3_resized = cv2.resize(new_image3, (100, 100))

new_image4_path = r'C:\Users\User\Downloads\oho2.png'
new_image4 = cv2.imread(new_image4_path, cv2.IMREAD_UNCHANGED)
new_image4_resized = cv2.resize(new_image4, (20, 20))  # 调整大小以适合矩形位置

# 加载新的GIF图像并调整大小 (new_gif2)
new_gif2_path = r'C:\Users\User\Downloads\goku.gif'
new_gif2 = imageio.mimread(new_gif2_path)
new_gif2 = [cv2.cvtColor(img, cv2.COLOR_RGBA2BGRA) for img in new_gif2]
new_gif2_resized = [cv2.resize(img, (100, 100)) for img in new_gif2]


# 加载手动和自动消除后图像
manual_cleared_image_path = r'C:\Users\User\Downloads\sid.png'
manual_cleared_image = cv2.imread(manual_cleared_image_path, cv2.IMREAD_UNCHANGED)
manual_cleared_image_resized = cv2.resize(manual_cleared_image, (100, 100))

auto_cleared_image_path = r'C:\Users\User\Downloads\f44.png'
auto_cleared_image = cv2.imread(auto_cleared_image_path, cv2.IMREAD_UNCHANGED)
auto_cleared_image_resized = cv2.resize(auto_cleared_image, (100, 100))

# 初始化MediaPipe手部检测
mp_hands = mp.solutions.hands
hands = mp_hands.Hands(static_image_mode=False, max_num_hands=2, min_detection_confidence=0.5, min_tracking_confidence=0.5)

# 开始捕获来自摄像头的视频
cap = cv2.VideoCapture(0)
if not cap.isOpened():
    print("无法打开摄像头")
    exit()

# 创建窗口以显示最终叠加图像
cv2.namedWindow('Final Overlay', cv2.WINDOW_NORMAL)
cv2.setWindowProperty('Final Overlay', cv2.WND_PROP_FULLSCREEN, cv2.WINDOW_FULLSCREEN)

# 初始化变量
color_detected = False
start_time = 0
show_center_image = False
delay_center_image = False
color_detection_active = True

# 初始化GIF位置
gif_initial_position = (270, 80)
gif_last_position = gif_initial_position
gif_attached = False

# 中心图像更改相关变量
center_image_change_start_time = None
center_image_elapsed_time = 0
center_image_changed_to_first = False
center_image_changed_to_second = False

# 手势检测变量
gesture_detected = False
rectangle_position = None
target_position = None
rectangle_velocity = 20

# 定时生成矩形相关变量
#rectangle_generation_interval = 5
#last_rectangle_generation_time = time.time()
#center_image_shown_time = 0

# 新增变量来控制矩形生成
rectangles_generation_allowed = False

# 在定义变量的地方添加一个标志变量
new_image3_shown = False  # 新增变量来标记 new_image3 是否已显示

# 添加标志变量
new_image1_shown = False


# 手动和自动消除的计数器
manual_clear_count = 0
auto_clear_count = 0

# 定义 new_gif 的位置
new_gif_position = (0, 0)  # 你可以在这里调整位置坐标
new_gif_x, new_gif_y = new_gif_position
new_gif_attached = False
new_gif2_index = 0

# 初始化变量
collision_start_time = None  # 用于记录碰撞开始时间
collision_duration = 0  # 用于累计碰撞时间
collision_detected = False  # 标志是否检测到碰撞

# 添加一个标志变量以跟踪矩形是否被清除
rectangle_cleared = True  # 初始为 True，以便首次生成矩形

# 初始化一个变量来保存矩形到达目的地的时间
arrival_time = None

# 中心位置的阈值，表示矩形接近目标位置的距离
center_threshold = 10

# 在矩形位置的代码逻辑之外，定义一个变量来存储时间戳
time_at_target = None

# 新增变量来标记窗口是否已关闭
window_closed = False


while True:
    ret, img = cap.read()
    if not ret:
        print("无法接收帧")
        break
    img = cv2.resize(img, (640, 360))

    if color_detection_active:
        mask = cv2.inRange(img, lower, upper)
        result = cv2.bitwise_and(img, img, mask=mask)
        contours, hierarchy = cv2.findContours(mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        overlay_img = np.zeros_like(img)
        seed_model_shown = generateSeedModel(overlay_img, contours, png_img_resized)
        if seed_model_shown:
            show_center_image = True
            if not delay_center_image:
                delay_center_image = True
                start_time = time.time()
    else:
        overlay_img = np.zeros_like(img)

    if delay_center_image and time.time() - start_time >= 3:
        delay_center_image = False
        color_detection_active = False

    if show_center_image and not delay_center_image:
        overlay_img = np.zeros_like(img)
        gif_frame = gif_resized[gif_index]

        # 显示GIF在手指末端或最后位置
        gif_x, gif_y = gif_last_position

        # 确保 GIF 框不超出图像边界
        gif_x = max(0, min(gif_x, overlay_img.shape[1] - gif_frame.shape[1]))
        gif_y = max(0, min(gif_y, overlay_img.shape[0] - gif_frame.shape[0]))

        # 叠加GIF图像
        for c in range(0, 3):
            overlay_img[gif_y:gif_y + gif_frame.shape[0], gif_x:gif_x + gif_frame.shape[1], c] = \
                overlay_img[gif_y:gif_y + gif_frame.shape[0], gif_x:gif_x + gif_frame.shape[1], c] * (1 - gif_frame[:, :, 3] / 255.0) + gif_frame[:, :, c] * (gif_frame[:, :, 3] / 255.0)

        # 手部检测
        img_rgb = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
        results = hands.process(img_rgb)

        hand_in_gif_area = False

        if results.multi_hand_landmarks:
            for hand_landmarks in results.multi_hand_landmarks:
                mp.solutions.drawing_utils.draw_landmarks(
                    overlay_img, 
                    hand_landmarks, 
                    mp_hands.HAND_CONNECTIONS,
                    mp.solutions.drawing_utils.DrawingSpec(color=(0, 255, 0), thickness=2, circle_radius=2),
                    mp.solutions.drawing_utils.DrawingSpec(color=(0, 0, 255), thickness=2, circle_radius=2)
                )

                for i in [8, 12, 16, 20]:
                    x = int(hand_landmarks.landmark[i].x * img.shape[1])
                    y = int(hand_landmarks.landmark[i].y * img.shape[0])
                    if gif_x - 10 < x < gif_x + gif_frame.shape[1] + 10 and gif_y - 10 < y < gif_y + gif_frame.shape[0] + 10:
                        gif_attached = True
                        gif_last_position = (x - gif_frame.shape[1] // 2, y - gif_frame.shape[0] // 2)
                        hand_in_gif_area = True
                        break

                if hand_landmarks.landmark[8].y < hand_landmarks.landmark[5].y:
                    gesture_detected = True

        if not hand_in_gif_area:
            gif_attached = False

        if gif_attached:
            gif_index = (gif_index + 1) % len(gif_resized)
            gif_play_count += 1
        else:
            gif_index = 0

        # 检查 gif 与 center_image 的碰撞
        center_x = (overlay_img.shape[1] - center_image_resized.shape[1]) // 2 
        center_y = (overlay_img.shape[0] - center_image_resized.shape[0]) // 2 + 100
        if gif_x < center_x + center_image_resized.shape[1] and gif_x + gif_frame.shape[1] > center_x and gif_y < center_y + center_image_resized.shape[0] and gif_y + gif_frame.shape[0] > center_y:
            if center_image_change_start_time is None:
                center_image_change_start_time = time.time()
            else:
                center_image_elapsed_time += time.time() - center_image_change_start_time
                center_image_change_start_time = time.time()
        else:
            center_image_change_start_time = None
            center_image_elapsed_time = 0

        if center_image_elapsed_time >= 3 and not center_image_changed_to_first:
            center_image_resized = new_image1_resized
            center_image_changed_to_first = True
            new_image1_shown = True  # 标记 new_image1 已经显示过
      

        for c in range(0, 3):
            overlay_img[center_y:center_y + center_image_resized.shape[0], center_x:center_x + center_image_resized.shape[1], c] = \
                center_image_resized[:, :, c] * (center_image_resized[:, :, 3] / 255.0) + overlay_img[center_y:center_y + center_image_resized.shape[0], center_x:center_x + center_image_resized.shape[1], c] * (1 - center_image_resized[:, :, 3] / 255.0)

        if new_image1_shown:
            new_gif_frame = new_gif_resized[new_gif_index]

            new_gif_x, new_gif_y = new_gif_position

            # 手部检测（添加这部分代码）
            img_rgb = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
            results = hands.process(img_rgb)
        
            hand_in_new_gif_area = False
        
            if results.multi_hand_landmarks:
                for hand_landmarks in results.multi_hand_landmarks:
                    for i in [8, 12, 16, 20]:
                        x = int(hand_landmarks.landmark[i].x * img.shape[1])
                        y = int(hand_landmarks.landmark[i].y * img.shape[0])
                        if new_gif_x - 10 < x < new_gif_x + new_gif_frame.shape[1] + 10 and new_gif_y - 10 < y < new_gif_y + new_gif_frame.shape[0] + 10:
                            new_gif_attached = True
                            new_gif_position = (x - new_gif_frame.shape[1] // 2, y - new_gif_frame.shape[0] // 2)
                            hand_in_new_gif_area = True
                            break
        
            if not hand_in_new_gif_area:
                new_gif_attached = False
        
            if new_gif_attached:
                new_gif_index = (new_gif_index + 1) % len(new_gif_resized)
                new_gif_play_count += 1
            else:
                new_gif_index = 0
        
            # 显示 new_gif
            new_gif_x, new_gif_y = new_gif_position
        
            # 确保 new_gif 框不超出图像边界
            new_gif_x = max(0, min(new_gif_x, overlay_img.shape[1] - new_gif_frame.shape[1]))
            new_gif_y = max(0, min(new_gif_y, overlay_img.shape[0] - new_gif_frame.shape[0]))
        
            # 叠加 new_gif 图像
            for c in range(0, 3):
                overlay_img[new_gif_y:new_gif_y + new_gif_frame.shape[0], new_gif_x:new_gif_x + new_gif_frame.shape[1], c] = \
                    overlay_img[new_gif_y:new_gif_y + new_gif_frame.shape[0], new_gif_x:new_gif_x + new_gif_frame.shape[1], c] * (1 - new_gif_frame[:, :, 3] / 255.0) + new_gif_frame[:, :, c] * (new_gif_frame[:, :, 3] / 255.0)

                 # 检测 new_gif 和 new_image1 的碰撞
            new_image1_x = (overlay_img.shape[1] - new_image1_resized.shape[1]) // 2
            new_image1_y = (overlay_img.shape[0] - new_image1_resized.shape[0]) // 2 + 100
    
            if new_gif_x < new_image1_x + new_image1_resized.shape[1] and \
               new_gif_x + new_gif_frame.shape[1] > new_image1_x and \
               new_gif_y < new_image1_y + new_image1_resized.shape[0] and \
               new_gif_y + new_gif_frame.shape[0] > new_image1_y:
    
                if not collision_detected:
                    collision_detected = True
                    collision_start_time = time.time()  # 记录碰撞开始时间
                else:
                    collision_duration += time.time() - collision_start_time
                    collision_start_time = time.time()
    
            else:
                collision_detected = False
                collision_duration = 0  # 如果不再碰撞，重置累计时间
    
            # 如果累计时间超过3秒，将new_image1更改为new_image2
            if collision_duration >= 3:
                center_image_resized = new_image2_resized
                new_image1_shown = False  # 停止显示 new_image1
                rectangles_generation_allowed = True
                new_image2_shown = True

            
            new_gif_index = (new_gif_index + 1) % len(new_gif_resized)
            
            
            if new_gif_start_time is None:
                new_gif_start_time = time.time()  # 记录播放开始时间
            new_gif_index = (new_gif_index + 1) % len(new_gif_resized)
            new_gif_play_count += 1  # 更新计数器
            new_gif_play_duration = time.time() - new_gif_start_time  # 计算播放时长
            new_gif_play_durations.append(new_gif_play_duration)  # 保存播放时长
            new_gif_start_time = time.time()  # 重置播放开始时间


        if rectangles_generation_allowed and new_image2_shown:
            if rectangle_cleared:
                # 生成新的矩形
                random_side = np.random.choice(['left', 'right', 'top', 'bottom'])
                if random_side == 'left':
                    rectangle_position = (-20, np.random.randint(0, img.shape[0]))
                elif random_side == 'right':
                    rectangle_position = (img.shape[1] + 20, np.random.randint(0, img.shape[0]))
                elif random_side == 'top':
                    rectangle_position = (np.random.randint(0, img.shape[1]), -20)
                elif random_side == 'bottom':
                    rectangle_position = (np.random.randint(0, img.shape[1]), img.shape[0] + 20)
                target_position = (overlay_img.shape[1] // 2, overlay_img.shape[0] // 2)
                rectangle_cleared = False  # 标记矩形未被清除
    
            if rectangle_position and target_position:
                rect_x, rect_y = rectangle_position
                target_x, target_y = target_position
    
                direction = np.array([target_x - rect_x, target_y - rect_y])
                distance = np.linalg.norm(direction)
    
                if distance > rectangle_velocity:
                    direction = direction / distance
                    rect_x += int(direction[0] * rectangle_velocity)
                    rect_y += int(direction[1] * rectangle_velocity)
                    rectangle_position = (rect_x, rect_y)
                    # 确保在移动时重置时间戳
                    time_at_target = None
                else:
                    # 当矩形到达目标位置时，记录到达时间
                    if time_at_target is None:
                        time_at_target = time.time()
                    # 检查是否已经到达目标位置，并且时间已经过去了5秒
                if time_at_target and (time.time() - time_at_target >= 5):
                    center_image_resized = auto_cleared_image_resized
                    time_at_target = None  # 重置时间戳，避免重复替换
                    rectangles_generation_allowed = False


                    
                    # 随机选择一个影片q
                    selected_video = random.choice(videos)
                    print(f"正在播放: {selected_video}")
                    # 使用系统默认播放器播放影片
                    subprocess.run(["start", selected_video], shell=True)
                    

                    
                if rectangle_position:
                    rect_x, rect_y = rectangle_position
                    rect_x = max(0, min(rect_x, overlay_img.shape[1] - new_gif2_resized[0].shape[1]))
                    rect_y = max(0, min(rect_y, overlay_img.shape[0] - new_gif2_resized[0].shape[0]))
    
                    # 使用 new_gif2 替换矩形
                    new_gif2_index = (new_gif2_index + 1) % len(new_gif2_resized)
                    new_gif2_frame = new_gif2_resized[new_gif2_index]
                    for c in range(0, 3):
                        overlay_img[rect_y:rect_y + new_gif2_frame.shape[0], rect_x:rect_x + new_gif2_frame.shape[1], c] = \
                            overlay_img[rect_y:rect_y + new_gif2_frame.shape[0], rect_x:rect_x + new_gif2_frame.shape[1], c] * (1 - new_gif2_frame[:, :, 3] / 255.0) + new_gif2_frame[:, :, c] * (new_gif2_frame[:, :, 3] / 255.0)
    
            # 检查手是否触摸到矩形，若触摸到则清除矩形并设置 rectangle_cleared 为 True
            if results.multi_hand_landmarks:
                for hand_landmarks in results.multi_hand_landmarks:
                    for i in [8, 12, 16, 20]:
                        x = int(hand_landmarks.landmark[i].x * img.shape[1])
                        y = int(hand_landmarks.landmark[i].y * img.shape[0])
                        if rect_x < x < rect_x + new_gif2_frame.shape[1] and rect_y < y < rect_y + new_gif2_frame.shape[0]:
                            rectangle_position = None  # 清除矩形
                            rectangle_cleared = True  # 标记矩形被清除
                            manual_clear_count += 1

                            break
    
    
                   
                      

        if manual_clear_count >= 5:
            center_image_resized = manual_cleared_image_resized
            manual_clear_count = 0
            rectangles_generation_allowed = False
            


             # 随机选择一个影片q
            selected_video = random.choice(videos)
            
            print(f"正在播放: {selected_video}")
            
            # 使用系统默认播放器播放影片
            subprocess.run(["start", selected_video], shell=True)
              
    
    cv2.imshow('Final Overlay', overlay_img)
    
    key = cv2.waitKey(1)
    if key == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()